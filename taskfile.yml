version: '3'

# Load environment variables from .env file
dotenv: ['.env']

# Global variables used across tasks
vars:
  BINARY_NAME: mp-emailer
  GO_FILES: '$(find . -name "*.go" -type f -not -path "./vendor/*")'
  BIN_DIR: bin
  DB_URL: mysql://{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}
  MIGRATIONS: "{{.MIGRATIONS_PATH}}"

# Task groups for better organization
tasks:
  # Development workflow tasks
  default:
    desc: Start development environment
    cmds:
      - task: dev

  dev:
    desc: Run development environment with hot reload
    cmds:
      - |
        bash -c '
          # Improved signal handling
          cleanup() {
            echo "Shutting down development environment..."
            kill $(jobs -p) 2>/dev/null
            wait
            echo "Cleanup complete"
          }
          
          trap cleanup SIGINT SIGTERM
          
          (cd web && npm run dev) & 
          (cd web && npx browser-sync start --config bs-config.js) &
          air & 
          
          wait
        '
    method: none

  # Build and run tasks
  build:
    desc: Build the Go application with version information
    vars:
      VERSION:
        sh: git describe --tags --always --dirty
      COMMIT:
        sh: git rev-parse HEAD
      BUILD_DATE:
        sh: date -u '+%Y-%m-%dT%H:%M:%SZ'
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - |
        go build -ldflags "
          -X 'github.com/jonesrussell/mp-emailer/version.Version={{.VERSION}}'
          -X 'github.com/jonesrussell/mp-emailer/version.BuildDate={{.BUILD_DATE}}'
          -X 'github.com/jonesrussell/mp-emailer/version.Commit={{.COMMIT}}'
        " -o {{.BIN_DIR}}/{{.BINARY_NAME}} main.go

  run:
    desc: Build and run the application
    deps: [build]
    cmds:
      - ./{{.BIN_DIR}}/{{.BINARY_NAME}}

  # Code quality tasks
  lint:
    desc: Run linters and format code
    cmds:
      - echo "Running linters..."
      - golangci-lint run
      - echo "Formatting code..."
      - gofmt -s -w {{.GO_FILES}}

  test:
    desc: Run tests with coverage
    cmds:
      - echo "Running tests..."
      - go test -v -race -cover ./...

  test:watch:
    desc: Run tests in watch mode
    cmds:
      - reflex -r '\.go$' go test -v ./...

  # Cleanup tasks
  clean:
    desc: Clean build artifacts and cache
    cmds:
      - rm -rf {{.BIN_DIR}}
      - go clean -cache -testcache

  # Frontend tasks
  frontend:
    desc: "Manage frontend tasks"
    summary: |
      Usage: task frontend -- <command>
      Commands:
        install   - Install dependencies
        build     - Build for production
        dev      - Start development server
    dir: web
    cmds:
      - |
        case "{{.CLI_ARGS}}" in
          "install") npm install ;;
          "build") npm run build ;;
          "dev") npm run dev ;;
          *) echo "See: task frontend --list" ;;
        esac

  # Composite tasks
  all:
    desc: Run all quality checks and build
    cmds:
      - task: lint
      - task: test
      - task: build

  # CI tasks
  ci:
    desc: Run continuous integration tasks
    cmds:
      - task: lint
      - task: test
      - task: build
      - task: frontend -- build

  # Other potential tasks:
  # - deploy: Deploy the application to production
  # - benchmark: Run performance benchmarks
  # - security-scan: Scan for security vulnerabilities

  migrate:create:
    desc: "Create a new migration file"
    summary: |
      Usage: task migrate:create -- <migration_name>
      Example: task migrate:create -- add_status_to_users
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Error: Migration name is required"
          echo "Usage: task migrate:create -- <migration_name>"
          exit 1
        fi
        goose -dir database/migrations mysql "{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}?parseTime=true" create {{.CLI_ARGS}} sql

  migrate:reset:
    desc: "Reset all migrations (rollback everything)"
    summary: |
      Usage: task migrate:reset
      Warning: This will drop all tables and data!
    shell: bash
    interactive: true
    cmds:
      - |
        echo "Are you sure you want to reset all migrations? This will delete all data! [y/N]"
        read REPLY
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          goose -dir database/migrations mysql "{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}?parseTime=true" reset
        fi

  migrate:up:
    desc: "Run all pending migrations"
    summary: |
      Usage: task migrate:up
      Applies all pending database migrations
    cmds:
      - goose -dir database/migrations mysql "{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}?parseTime=true" up

  migrate:down:
    desc: "Rollback the last migration"
    summary: |
      Usage: task migrate:down
      Rolls back the most recent database migration
    cmds:
      - goose -dir database/migrations mysql "{{.DB_USER}}:{{.DB_PASSWORD}}@tcp({{.DB_HOST}}:{{.DB_PORT}})/{{.DB_NAME}}?parseTime=true" down
  