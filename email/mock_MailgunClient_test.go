// Code generated by mockery v2.46.3. DO NOT EDIT.

package email

import (
	context "context"

	mailgun "github.com/mailgun/mailgun-go/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockMailgunClient is an autogenerated mock type for the MailgunClient type
type MockMailgunClient struct {
	mock.Mock
}

type MockMailgunClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailgunClient) EXPECT() *MockMailgunClient_Expecter {
	return &MockMailgunClient_Expecter{mock: &_m.Mock}
}

// NewMessage provides a mock function with given fields: from, subject, text, to
func (_m *MockMailgunClient) NewMessage(from string, subject string, text string, to ...string) *mailgun.Message {
	_va := make([]interface{}, len(to))
	for _i := range to {
		_va[_i] = to[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, from, subject, text)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewMessage")
	}

	var r0 *mailgun.Message
	if rf, ok := ret.Get(0).(func(string, string, string, ...string) *mailgun.Message); ok {
		r0 = rf(from, subject, text, to...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailgun.Message)
		}
	}

	return r0
}

// MockMailgunClient_NewMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMessage'
type MockMailgunClient_NewMessage_Call struct {
	*mock.Call
}

// NewMessage is a helper method to define mock.On call
//   - from string
//   - subject string
//   - text string
//   - to ...string
func (_e *MockMailgunClient_Expecter) NewMessage(from interface{}, subject interface{}, text interface{}, to ...interface{}) *MockMailgunClient_NewMessage_Call {
	return &MockMailgunClient_NewMessage_Call{Call: _e.mock.On("NewMessage",
		append([]interface{}{from, subject, text}, to...)...)}
}

func (_c *MockMailgunClient_NewMessage_Call) Run(run func(from string, subject string, text string, to ...string)) *MockMailgunClient_NewMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockMailgunClient_NewMessage_Call) Return(_a0 *mailgun.Message) *MockMailgunClient_NewMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailgunClient_NewMessage_Call) RunAndReturn(run func(string, string, string, ...string) *mailgun.Message) *MockMailgunClient_NewMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, message
func (_m *MockMailgunClient) Send(ctx context.Context, message *mailgun.Message) (string, string, error) {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailgun.Message) (string, string, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailgun.Message) string); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailgun.Message) string); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *mailgun.Message) error); ok {
		r2 = rf(ctx, message)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMailgunClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockMailgunClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - message *mailgun.Message
func (_e *MockMailgunClient_Expecter) Send(ctx interface{}, message interface{}) *MockMailgunClient_Send_Call {
	return &MockMailgunClient_Send_Call{Call: _e.mock.On("Send", ctx, message)}
}

func (_c *MockMailgunClient_Send_Call) Run(run func(ctx context.Context, message *mailgun.Message)) *MockMailgunClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*mailgun.Message))
	})
	return _c
}

func (_c *MockMailgunClient_Send_Call) Return(_a0 string, _a1 string, _a2 error) *MockMailgunClient_Send_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMailgunClient_Send_Call) RunAndReturn(run func(context.Context, *mailgun.Message) (string, string, error)) *MockMailgunClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailgunClient creates a new instance of MockMailgunClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailgunClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailgunClient {
	mock := &MockMailgunClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
