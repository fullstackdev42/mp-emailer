// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockMigrator is an autogenerated mock type for the Migrator type
type MockMigrator struct {
	mock.Mock
}

type MockMigrator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMigrator) EXPECT() *MockMigrator_Expecter {
	return &MockMigrator_Expecter{mock: &_m.Mock}
}

// AutoMigrate provides a mock function with given fields: dst
func (_m *MockMigrator) AutoMigrate(dst ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dst...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AutoMigrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dst...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_AutoMigrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoMigrate'
type MockMigrator_AutoMigrate_Call struct {
	*mock.Call
}

// AutoMigrate is a helper method to define mock.On call
//   - dst ...interface{}
func (_e *MockMigrator_Expecter) AutoMigrate(dst ...interface{}) *MockMigrator_AutoMigrate_Call {
	return &MockMigrator_AutoMigrate_Call{Call: _e.mock.On("AutoMigrate",
		append([]interface{}{}, dst...)...)}
}

func (_c *MockMigrator_AutoMigrate_Call) Run(run func(dst ...interface{})) *MockMigrator_AutoMigrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockMigrator_AutoMigrate_Call) Return(_a0 error) *MockMigrator_AutoMigrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_AutoMigrate_Call) RunAndReturn(run func(...interface{}) error) *MockMigrator_AutoMigrate_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockMigrator) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockMigrator_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockMigrator_Expecter) Close() *MockMigrator_Close_Call {
	return &MockMigrator_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockMigrator_Close_Call) Run(run func()) *MockMigrator_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMigrator_Close_Call) Return(_a0 error) *MockMigrator_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_Close_Call) RunAndReturn(run func() error) *MockMigrator_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTable provides a mock function with given fields: dst
func (_m *MockMigrator) CreateTable(dst ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dst...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dst...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_CreateTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTable'
type MockMigrator_CreateTable_Call struct {
	*mock.Call
}

// CreateTable is a helper method to define mock.On call
//   - dst ...interface{}
func (_e *MockMigrator_Expecter) CreateTable(dst ...interface{}) *MockMigrator_CreateTable_Call {
	return &MockMigrator_CreateTable_Call{Call: _e.mock.On("CreateTable",
		append([]interface{}{}, dst...)...)}
}

func (_c *MockMigrator_CreateTable_Call) Run(run func(dst ...interface{})) *MockMigrator_CreateTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockMigrator_CreateTable_Call) Return(_a0 error) *MockMigrator_CreateTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_CreateTable_Call) RunAndReturn(run func(...interface{}) error) *MockMigrator_CreateTable_Call {
	_c.Call.Return(run)
	return _c
}

// DropTable provides a mock function with given fields: dst
func (_m *MockMigrator) DropTable(dst ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dst...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DropTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dst...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_DropTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropTable'
type MockMigrator_DropTable_Call struct {
	*mock.Call
}

// DropTable is a helper method to define mock.On call
//   - dst ...interface{}
func (_e *MockMigrator_Expecter) DropTable(dst ...interface{}) *MockMigrator_DropTable_Call {
	return &MockMigrator_DropTable_Call{Call: _e.mock.On("DropTable",
		append([]interface{}{}, dst...)...)}
}

func (_c *MockMigrator_DropTable_Call) Run(run func(dst ...interface{})) *MockMigrator_DropTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockMigrator_DropTable_Call) Return(_a0 error) *MockMigrator_DropTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_DropTable_Call) RunAndReturn(run func(...interface{}) error) *MockMigrator_DropTable_Call {
	_c.Call.Return(run)
	return _c
}

// HasTable provides a mock function with given fields: dst
func (_m *MockMigrator) HasTable(dst interface{}) bool {
	ret := _m.Called(dst)

	if len(ret) == 0 {
		panic("no return value specified for HasTable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(dst)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMigrator_HasTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasTable'
type MockMigrator_HasTable_Call struct {
	*mock.Call
}

// HasTable is a helper method to define mock.On call
//   - dst interface{}
func (_e *MockMigrator_Expecter) HasTable(dst interface{}) *MockMigrator_HasTable_Call {
	return &MockMigrator_HasTable_Call{Call: _e.mock.On("HasTable", dst)}
}

func (_c *MockMigrator_HasTable_Call) Run(run func(dst interface{})) *MockMigrator_HasTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockMigrator_HasTable_Call) Return(_a0 bool) *MockMigrator_HasTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_HasTable_Call) RunAndReturn(run func(interface{}) bool) *MockMigrator_HasTable_Call {
	_c.Call.Return(run)
	return _c
}

// Up provides a mock function with given fields:
func (_m *MockMigrator) Up() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Up")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMigrator_Up_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Up'
type MockMigrator_Up_Call struct {
	*mock.Call
}

// Up is a helper method to define mock.On call
func (_e *MockMigrator_Expecter) Up() *MockMigrator_Up_Call {
	return &MockMigrator_Up_Call{Call: _e.mock.On("Up")}
}

func (_c *MockMigrator_Up_Call) Run(run func()) *MockMigrator_Up_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMigrator_Up_Call) Return(_a0 error) *MockMigrator_Up_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMigrator_Up_Call) RunAndReturn(run func() error) *MockMigrator_Up_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMigrator creates a new instance of MockMigrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMigrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMigrator {
	mock := &MockMigrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
