// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockAssociationInterface is an autogenerated mock type for the AssociationInterface type
type MockAssociationInterface struct {
	mock.Mock
}

type MockAssociationInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAssociationInterface) EXPECT() *MockAssociationInterface_Expecter {
	return &MockAssociationInterface_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: values
func (_m *MockAssociationInterface) Append(values ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(values...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssociationInterface_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type MockAssociationInterface_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - values ...interface{}
func (_e *MockAssociationInterface_Expecter) Append(values ...interface{}) *MockAssociationInterface_Append_Call {
	return &MockAssociationInterface_Append_Call{Call: _e.mock.On("Append",
		append([]interface{}{}, values...)...)}
}

func (_c *MockAssociationInterface_Append_Call) Run(run func(values ...interface{})) *MockAssociationInterface_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockAssociationInterface_Append_Call) Return(_a0 error) *MockAssociationInterface_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssociationInterface_Append_Call) RunAndReturn(run func(...interface{}) error) *MockAssociationInterface_Append_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with given fields:
func (_m *MockAssociationInterface) Clear() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssociationInterface_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockAssociationInterface_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockAssociationInterface_Expecter) Clear() *MockAssociationInterface_Clear_Call {
	return &MockAssociationInterface_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockAssociationInterface_Clear_Call) Run(run func()) *MockAssociationInterface_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssociationInterface_Clear_Call) Return(_a0 error) *MockAssociationInterface_Clear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssociationInterface_Clear_Call) RunAndReturn(run func() error) *MockAssociationInterface_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function with given fields:
func (_m *MockAssociationInterface) Count() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockAssociationInterface_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockAssociationInterface_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *MockAssociationInterface_Expecter) Count() *MockAssociationInterface_Count_Call {
	return &MockAssociationInterface_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *MockAssociationInterface_Count_Call) Run(run func()) *MockAssociationInterface_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAssociationInterface_Count_Call) Return(_a0 int64) *MockAssociationInterface_Count_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssociationInterface_Count_Call) RunAndReturn(run func() int64) *MockAssociationInterface_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: values
func (_m *MockAssociationInterface) Delete(values ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(values...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssociationInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAssociationInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - values ...interface{}
func (_e *MockAssociationInterface_Expecter) Delete(values ...interface{}) *MockAssociationInterface_Delete_Call {
	return &MockAssociationInterface_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{}, values...)...)}
}

func (_c *MockAssociationInterface_Delete_Call) Run(run func(values ...interface{})) *MockAssociationInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockAssociationInterface_Delete_Call) Return(_a0 error) *MockAssociationInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssociationInterface_Delete_Call) RunAndReturn(run func(...interface{}) error) *MockAssociationInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: out
func (_m *MockAssociationInterface) Find(out interface{}) error {
	ret := _m.Called(out)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssociationInterface_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockAssociationInterface_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - out interface{}
func (_e *MockAssociationInterface_Expecter) Find(out interface{}) *MockAssociationInterface_Find_Call {
	return &MockAssociationInterface_Find_Call{Call: _e.mock.On("Find", out)}
}

func (_c *MockAssociationInterface_Find_Call) Run(run func(out interface{})) *MockAssociationInterface_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockAssociationInterface_Find_Call) Return(_a0 error) *MockAssociationInterface_Find_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssociationInterface_Find_Call) RunAndReturn(run func(interface{}) error) *MockAssociationInterface_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Replace provides a mock function with given fields: values
func (_m *MockAssociationInterface) Replace(values ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(values...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAssociationInterface_Replace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replace'
type MockAssociationInterface_Replace_Call struct {
	*mock.Call
}

// Replace is a helper method to define mock.On call
//   - values ...interface{}
func (_e *MockAssociationInterface_Expecter) Replace(values ...interface{}) *MockAssociationInterface_Replace_Call {
	return &MockAssociationInterface_Replace_Call{Call: _e.mock.On("Replace",
		append([]interface{}{}, values...)...)}
}

func (_c *MockAssociationInterface_Replace_Call) Run(run func(values ...interface{})) *MockAssociationInterface_Replace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockAssociationInterface_Replace_Call) Return(_a0 error) *MockAssociationInterface_Replace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAssociationInterface_Replace_Call) RunAndReturn(run func(...interface{}) error) *MockAssociationInterface_Replace_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAssociationInterface creates a new instance of MockAssociationInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAssociationInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAssociationInterface {
	mock := &MockAssociationInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
