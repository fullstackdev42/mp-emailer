package mocks

import (
	"github.com/jonesrussell/loggo"
	"github.com/stretchr/testify/mock"
)

// MockLoggerInterface is an autogenerated mock type for the LoggerInterface type
type MockLoggerInterface struct {
	mock.Mock
}

type MockLoggerInterfaceExpecter struct {
	mock *mock.Mock
}

func (_m *MockLoggerInterface) EXPECT() *MockLoggerInterfaceExpecter {
	return &MockLoggerInterfaceExpecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg, args
func (_m *MockLoggerInterface) Debug(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLoggerInterfaceDebugCall is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLoggerInterfaceDebugCall struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *MockLoggerInterfaceExpecter) Debug(msg interface{}, args ...interface{}) *MockLoggerInterfaceDebugCall {
	return &MockLoggerInterfaceDebugCall{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockLoggerInterfaceDebugCall) Run(run func(msg string, args ...interface{})) *MockLoggerInterfaceDebugCall {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLoggerInterfaceDebugCall) Return() *MockLoggerInterfaceDebugCall {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggerInterfaceDebugCall) RunAndReturn(run func(string, ...interface{})) *MockLoggerInterfaceDebugCall {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: msg, err, args
func (_m *MockLoggerInterface) Error(msg string, err error, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg, err)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLoggerInterfaceErrorCall is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLoggerInterfaceErrorCall struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - err error
//   - args ...interface{}
func (_e *MockLoggerInterfaceExpecter) Error(msg interface{}, err interface{}, args ...interface{}) *MockLoggerInterfaceErrorCall {
	return &MockLoggerInterfaceErrorCall{Call: _e.mock.On("Error",
		append([]interface{}{msg, err}, args...)...)}
}

func (_c *MockLoggerInterfaceErrorCall) Run(run func(msg string, err error, args ...interface{})) *MockLoggerInterfaceErrorCall {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a
			}
		}
		run(args[0].(string), args[1].(error), variadicArgs...)
	})
	return _c
}

func (_c *MockLoggerInterfaceErrorCall) Return() *MockLoggerInterfaceErrorCall {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggerInterfaceErrorCall) RunAndReturn(run func(string, error, ...interface{})) *MockLoggerInterfaceErrorCall {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: msg, err, args
func (_m *MockLoggerInterface) Fatal(msg string, err error, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg, err)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLoggerInterfaceFatalCall is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockLoggerInterfaceFatalCall struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - msg string
//   - err error
//   - args ...interface{}
func (_e *MockLoggerInterfaceExpecter) Fatal(msg interface{}, err interface{}, args ...interface{}) *MockLoggerInterfaceFatalCall {
	return &MockLoggerInterfaceFatalCall{Call: _e.mock.On("Fatal",
		append([]interface{}{msg, err}, args...)...)}
}

func (_c *MockLoggerInterfaceFatalCall) Run(run func(msg string, err error, args ...interface{})) *MockLoggerInterfaceFatalCall {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a // Remove the unnecessary type assertion
			}
		}
		run(args[0].(string), args[1].(error), variadicArgs...)
	})
	return _c
}

func (_c *MockLoggerInterfaceFatalCall) Return() *MockLoggerInterfaceFatalCall {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggerInterfaceFatalCall) RunAndReturn(run func(string, error, ...interface{})) *MockLoggerInterfaceFatalCall {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg, args
func (_m *MockLoggerInterface) Info(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLoggerInterfaceInfoCall is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLoggerInterfaceInfoCall struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *MockLoggerInterfaceExpecter) Info(msg interface{}, args ...interface{}) *MockLoggerInterfaceInfoCall {
	return &MockLoggerInterfaceInfoCall{Call: _e.mock.On("Info",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockLoggerInterfaceInfoCall) Run(run func(msg string, args ...interface{})) *MockLoggerInterfaceInfoCall {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLoggerInterfaceInfoCall) Return() *MockLoggerInterfaceInfoCall {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggerInterfaceInfoCall) RunAndReturn(run func(string, ...interface{})) *MockLoggerInterfaceInfoCall {
	_c.Call.Return(run)
	return _c
}

// IsDebugEnabled provides a mock function with given fields:
func (_m *MockLoggerInterface) IsDebugEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDebugEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockLoggerInterfaceIsDebugEnabledCall is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDebugEnabled'
type MockLoggerInterfaceIsDebugEnabledCall struct {
	*mock.Call
}

// IsDebugEnabled is a helper method to define mock.On call
func (_e *MockLoggerInterfaceExpecter) IsDebugEnabled() *MockLoggerInterfaceIsDebugEnabledCall {
	return &MockLoggerInterfaceIsDebugEnabledCall{Call: _e.mock.On("IsDebugEnabled")}
}

func (_c *MockLoggerInterfaceIsDebugEnabledCall) Run(run func()) *MockLoggerInterfaceIsDebugEnabledCall {
	_c.Call.Run(func(_ mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLoggerInterfaceIsDebugEnabledCall) Return(_a0 bool) *MockLoggerInterfaceIsDebugEnabledCall {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoggerInterfaceIsDebugEnabledCall) RunAndReturn(run func() bool) *MockLoggerInterfaceIsDebugEnabledCall {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: msg, args
func (_m *MockLoggerInterface) Warn(msg string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockLoggerInterfaceWarnCall is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLoggerInterfaceWarnCall struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - args ...interface{}
func (_e *MockLoggerInterfaceExpecter) Warn(msg interface{}, args ...interface{}) *MockLoggerInterfaceWarnCall {
	return &MockLoggerInterfaceWarnCall{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, args...)...)}
}

func (_c *MockLoggerInterfaceWarnCall) Run(run func(msg string, args ...interface{})) *MockLoggerInterfaceWarnCall {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLoggerInterfaceWarnCall) Return() *MockLoggerInterfaceWarnCall {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggerInterfaceWarnCall) RunAndReturn(run func(string, ...interface{})) *MockLoggerInterfaceWarnCall {
	_c.Call.Return(run)
	return _c
}

// WithOperation provides a mock function with given fields: operationID
func (_m *MockLoggerInterface) WithOperation(operationID string) loggo.LoggerInterface {
	ret := _m.Called(operationID)

	if len(ret) == 0 {
		panic("no return value specified for WithOperation")
	}

	var r0 loggo.LoggerInterface
	if rf, ok := ret.Get(0).(func(string) loggo.LoggerInterface); ok {
		r0 = rf(operationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(loggo.LoggerInterface)
		}
	}

	return r0
}

// MockLoggerInterfaceWithOperationCall is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithOperation'
type MockLoggerInterfaceWithOperationCall struct {
	*mock.Call
}

// WithOperation is a helper method to define mock.On call
//   - operationID string
func (_e *MockLoggerInterfaceExpecter) WithOperation(operationID interface{}) *MockLoggerInterfaceWithOperationCall {
	return &MockLoggerInterfaceWithOperationCall{Call: _e.mock.On("WithOperation", operationID)}
}

func (_c *MockLoggerInterfaceWithOperationCall) Run(run func(operationID string)) *MockLoggerInterfaceWithOperationCall {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLoggerInterfaceWithOperationCall) Return(_a0 loggo.LoggerInterface) *MockLoggerInterfaceWithOperationCall {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLoggerInterfaceWithOperationCall) RunAndReturn(run func(string) loggo.LoggerInterface) *MockLoggerInterfaceWithOperationCall {
	_c.Call.Return(run)
	return _c
}

// NewMockLoggerInterface creates a new instance of MockLoggerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoggerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoggerInterface {
	m := &MockLoggerInterface{}
	m.Mock.Test(t)

	t.Cleanup(func() { m.AssertExpectations(t) })

	return m
}
