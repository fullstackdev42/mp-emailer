// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	user "github.com/jonesrussell/mp-emailer/user"
	mock "github.com/stretchr/testify/mock"
)

// MockServiceInterface is an autogenerated mock type for the ServiceInterface type
type MockServiceInterface struct {
	mock.Mock
}

type MockServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceInterface) EXPECT() *MockServiceInterface_Expecter {
	return &MockServiceInterface_Expecter{mock: &_m.Mock}
}

// AuthenticateUser provides a mock function with given fields: username, password
func (_m *MockServiceInterface) AuthenticateUser(username string, password string) (bool, *user.User, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 bool
	var r1 *user.User
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, *user.User, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) *user.User); ok {
		r1 = rf(username, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*user.User)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(username, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceInterface_AuthenticateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateUser'
type MockServiceInterface_AuthenticateUser_Call struct {
	*mock.Call
}

// AuthenticateUser is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *MockServiceInterface_Expecter) AuthenticateUser(username interface{}, password interface{}) *MockServiceInterface_AuthenticateUser_Call {
	return &MockServiceInterface_AuthenticateUser_Call{Call: _e.mock.On("AuthenticateUser", username, password)}
}

func (_c *MockServiceInterface_AuthenticateUser_Call) Run(run func(username string, password string)) *MockServiceInterface_AuthenticateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockServiceInterface_AuthenticateUser_Call) Return(_a0 bool, _a1 *user.User, _a2 error) *MockServiceInterface_AuthenticateUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServiceInterface_AuthenticateUser_Call) RunAndReturn(run func(string, string) (bool, *user.User, error)) *MockServiceInterface_AuthenticateUser_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: message, err, params
func (_m *MockServiceInterface) Error(message string, err error, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message, err)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// MockServiceInterface_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockServiceInterface_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - message string
//   - err error
//   - params ...interface{}
func (_e *MockServiceInterface_Expecter) Error(message interface{}, err interface{}, params ...interface{}) *MockServiceInterface_Error_Call {
	return &MockServiceInterface_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{message, err}, params...)...)}
}

func (_c *MockServiceInterface_Error_Call) Run(run func(message string, err error, params ...interface{})) *MockServiceInterface_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), args[1].(error), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceInterface_Error_Call) Return() *MockServiceInterface_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceInterface_Error_Call) RunAndReturn(run func(string, error, ...interface{})) *MockServiceInterface_Error_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: params
func (_m *MockServiceInterface) GetUser(params *user.GetDTO) (*user.DTO, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *user.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.GetDTO) (*user.DTO, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*user.GetDTO) *user.DTO); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.GetDTO) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceInterface_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockServiceInterface_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - params *user.GetDTO
func (_e *MockServiceInterface_Expecter) GetUser(params interface{}) *MockServiceInterface_GetUser_Call {
	return &MockServiceInterface_GetUser_Call{Call: _e.mock.On("GetUser", params)}
}

func (_c *MockServiceInterface_GetUser_Call) Run(run func(params *user.GetDTO)) *MockServiceInterface_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.GetDTO))
	})
	return _c
}

func (_c *MockServiceInterface_GetUser_Call) Return(_a0 *user.DTO, _a1 error) *MockServiceInterface_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceInterface_GetUser_Call) RunAndReturn(run func(*user.GetDTO) (*user.DTO, error)) *MockServiceInterface_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: message, params
func (_m *MockServiceInterface) Info(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// MockServiceInterface_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockServiceInterface_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - message string
//   - params ...interface{}
func (_e *MockServiceInterface_Expecter) Info(message interface{}, params ...interface{}) *MockServiceInterface_Info_Call {
	return &MockServiceInterface_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{message}, params...)...)}
}

func (_c *MockServiceInterface_Info_Call) Run(run func(message string, params ...interface{})) *MockServiceInterface_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceInterface_Info_Call) Return() *MockServiceInterface_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceInterface_Info_Call) RunAndReturn(run func(string, ...interface{})) *MockServiceInterface_Info_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: params
func (_m *MockServiceInterface) LoginUser(params *user.LoginDTO) (string, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.LoginDTO) (string, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*user.LoginDTO) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*user.LoginDTO) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceInterface_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockServiceInterface_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - params *user.LoginDTO
func (_e *MockServiceInterface_Expecter) LoginUser(params interface{}) *MockServiceInterface_LoginUser_Call {
	return &MockServiceInterface_LoginUser_Call{Call: _e.mock.On("LoginUser", params)}
}

func (_c *MockServiceInterface_LoginUser_Call) Run(run func(params *user.LoginDTO)) *MockServiceInterface_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.LoginDTO))
	})
	return _c
}

func (_c *MockServiceInterface_LoginUser_Call) Return(_a0 string, _a1 error) *MockServiceInterface_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceInterface_LoginUser_Call) RunAndReturn(run func(*user.LoginDTO) (string, error)) *MockServiceInterface_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: params
func (_m *MockServiceInterface) RegisterUser(params *user.RegisterDTO) (*user.DTO, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *user.DTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.RegisterDTO) (*user.DTO, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*user.RegisterDTO) *user.DTO); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.DTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.RegisterDTO) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceInterface_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockServiceInterface_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - params *user.RegisterDTO
func (_e *MockServiceInterface_Expecter) RegisterUser(params interface{}) *MockServiceInterface_RegisterUser_Call {
	return &MockServiceInterface_RegisterUser_Call{Call: _e.mock.On("RegisterUser", params)}
}

func (_c *MockServiceInterface_RegisterUser_Call) Run(run func(params *user.RegisterDTO)) *MockServiceInterface_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.RegisterDTO))
	})
	return _c
}

func (_c *MockServiceInterface_RegisterUser_Call) Return(_a0 *user.DTO, _a1 error) *MockServiceInterface_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceInterface_RegisterUser_Call) RunAndReturn(run func(*user.RegisterDTO) (*user.DTO, error)) *MockServiceInterface_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: message, params
func (_m *MockServiceInterface) Warn(message string, params ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, params...)
	_m.Called(_ca...)
}

// MockServiceInterface_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockServiceInterface_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - message string
//   - params ...interface{}
func (_e *MockServiceInterface_Expecter) Warn(message interface{}, params ...interface{}) *MockServiceInterface_Warn_Call {
	return &MockServiceInterface_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{message}, params...)...)}
}

func (_c *MockServiceInterface_Warn_Call) Run(run func(message string, params ...interface{})) *MockServiceInterface_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockServiceInterface_Warn_Call) Return() *MockServiceInterface_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServiceInterface_Warn_Call) RunAndReturn(run func(string, ...interface{})) *MockServiceInterface_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServiceInterface creates a new instance of MockServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceInterface {
	mock := &MockServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
