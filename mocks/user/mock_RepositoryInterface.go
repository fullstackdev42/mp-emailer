// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/jonesrussell/mp-emailer/user"
	mock "github.com/stretchr/testify/mock"
)

// MockRepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type MockRepositoryInterface struct {
	mock.Mock
}

type MockRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryInterface) EXPECT() *MockRepositoryInterface_Expecter {
	return &MockRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockRepositoryInterface) Create(ctx context.Context, _a1 *user.User) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *user.User
func (_e *MockRepositoryInterface_Expecter) Create(ctx interface{}, _a1 interface{}) *MockRepositoryInterface_Create_Call {
	return &MockRepositoryInterface_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockRepositoryInterface_Create_Call) Run(run func(ctx context.Context, _a1 *user.User)) *MockRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.User))
	})
	return _c
}

func (_c *MockRepositoryInterface_Create_Call) Return(_a0 error) *MockRepositoryInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryInterface_Create_Call) RunAndReturn(run func(context.Context, *user.User) error) *MockRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *MockRepositoryInterface) FindByEmail(ctx context.Context, email string) (*user.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryInterface_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockRepositoryInterface_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockRepositoryInterface_Expecter) FindByEmail(ctx interface{}, email interface{}) *MockRepositoryInterface_FindByEmail_Call {
	return &MockRepositoryInterface_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *MockRepositoryInterface_FindByEmail_Call) Run(run func(ctx context.Context, email string)) *MockRepositoryInterface_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepositoryInterface_FindByEmail_Call) Return(_a0 *user.User, _a1 error) *MockRepositoryInterface_FindByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryInterface_FindByEmail_Call) RunAndReturn(run func(context.Context, string) (*user.User, error)) *MockRepositoryInterface_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByResetToken provides a mock function with given fields: ctx, token
func (_m *MockRepositoryInterface) FindByResetToken(ctx context.Context, token string) (*user.User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for FindByResetToken")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryInterface_FindByResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByResetToken'
type MockRepositoryInterface_FindByResetToken_Call struct {
	*mock.Call
}

// FindByResetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockRepositoryInterface_Expecter) FindByResetToken(ctx interface{}, token interface{}) *MockRepositoryInterface_FindByResetToken_Call {
	return &MockRepositoryInterface_FindByResetToken_Call{Call: _e.mock.On("FindByResetToken", ctx, token)}
}

func (_c *MockRepositoryInterface_FindByResetToken_Call) Run(run func(ctx context.Context, token string)) *MockRepositoryInterface_FindByResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepositoryInterface_FindByResetToken_Call) Return(_a0 *user.User, _a1 error) *MockRepositoryInterface_FindByResetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryInterface_FindByResetToken_Call) RunAndReturn(run func(context.Context, string) (*user.User, error)) *MockRepositoryInterface_FindByResetToken_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsername provides a mock function with given fields: ctx, username
func (_m *MockRepositoryInterface) FindByUsername(ctx context.Context, username string) (*user.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*user.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryInterface_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type MockRepositoryInterface_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockRepositoryInterface_Expecter) FindByUsername(ctx interface{}, username interface{}) *MockRepositoryInterface_FindByUsername_Call {
	return &MockRepositoryInterface_FindByUsername_Call{Call: _e.mock.On("FindByUsername", ctx, username)}
}

func (_c *MockRepositoryInterface_FindByUsername_Call) Run(run func(ctx context.Context, username string)) *MockRepositoryInterface_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepositoryInterface_FindByUsername_Call) Return(_a0 *user.User, _a1 error) *MockRepositoryInterface_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryInterface_FindByUsername_Call) RunAndReturn(run func(context.Context, string) (*user.User, error)) *MockRepositoryInterface_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *MockRepositoryInterface) Update(ctx context.Context, _a1 *user.User) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *user.User
func (_e *MockRepositoryInterface_Expecter) Update(ctx interface{}, _a1 interface{}) *MockRepositoryInterface_Update_Call {
	return &MockRepositoryInterface_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *MockRepositoryInterface_Update_Call) Run(run func(ctx context.Context, _a1 *user.User)) *MockRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.User))
	})
	return _c
}

func (_c *MockRepositoryInterface_Update_Call) Return(_a0 error) *MockRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryInterface_Update_Call) RunAndReturn(run func(context.Context, *user.User) error) *MockRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryInterface creates a new instance of MockRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
