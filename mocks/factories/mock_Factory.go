// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockFactory is an autogenerated mock type for the Factory type
type MockFactory struct {
	mock.Mock
}

type MockFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFactory) EXPECT() *MockFactory_Expecter {
	return &MockFactory_Expecter{mock: &_m.Mock}
}

// Make provides a mock function with given fields:
func (_m *MockFactory) Make() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Make")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockFactory_Make_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Make'
type MockFactory_Make_Call struct {
	*mock.Call
}

// Make is a helper method to define mock.On call
func (_e *MockFactory_Expecter) Make() *MockFactory_Make_Call {
	return &MockFactory_Make_Call{Call: _e.mock.On("Make")}
}

func (_c *MockFactory_Make_Call) Run(run func()) *MockFactory_Make_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFactory_Make_Call) Return(_a0 interface{}) *MockFactory_Make_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFactory_Make_Call) RunAndReturn(run func() interface{}) *MockFactory_Make_Call {
	_c.Call.Return(run)
	return _c
}

// MakeMany provides a mock function with given fields: count
func (_m *MockFactory) MakeMany(count int) []interface{} {
	ret := _m.Called(count)

	if len(ret) == 0 {
		panic("no return value specified for MakeMany")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(int) []interface{}); ok {
		r0 = rf(count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// MockFactory_MakeMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeMany'
type MockFactory_MakeMany_Call struct {
	*mock.Call
}

// MakeMany is a helper method to define mock.On call
//   - count int
func (_e *MockFactory_Expecter) MakeMany(count interface{}) *MockFactory_MakeMany_Call {
	return &MockFactory_MakeMany_Call{Call: _e.mock.On("MakeMany", count)}
}

func (_c *MockFactory_MakeMany_Call) Run(run func(count int)) *MockFactory_MakeMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockFactory_MakeMany_Call) Return(_a0 []interface{}) *MockFactory_MakeMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFactory_MakeMany_Call) RunAndReturn(run func(int) []interface{}) *MockFactory_MakeMany_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFactory creates a new instance of MockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFactory {
	mock := &MockFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
