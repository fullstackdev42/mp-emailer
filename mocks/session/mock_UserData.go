// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockUserData is an autogenerated mock type for the UserData type
type MockUserData struct {
	mock.Mock
}

type MockUserData_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserData) EXPECT() *MockUserData_Expecter {
	return &MockUserData_Expecter{mock: &_m.Mock}
}

// GetCustomData provides a mock function with given fields:
func (_m *MockUserData) GetCustomData() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCustomData")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockUserData_GetCustomData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomData'
type MockUserData_GetCustomData_Call struct {
	*mock.Call
}

// GetCustomData is a helper method to define mock.On call
func (_e *MockUserData_Expecter) GetCustomData() *MockUserData_GetCustomData_Call {
	return &MockUserData_GetCustomData_Call{Call: _e.mock.On("GetCustomData")}
}

func (_c *MockUserData_GetCustomData_Call) Run(run func()) *MockUserData_GetCustomData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserData_GetCustomData_Call) Return(_a0 map[string]interface{}) *MockUserData_GetCustomData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserData_GetCustomData_Call) RunAndReturn(run func() map[string]interface{}) *MockUserData_GetCustomData_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *MockUserData) GetID() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockUserData_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockUserData_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockUserData_Expecter) GetID() *MockUserData_GetID_Call {
	return &MockUserData_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockUserData_GetID_Call) Run(run func()) *MockUserData_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserData_GetID_Call) Return(_a0 interface{}) *MockUserData_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserData_GetID_Call) RunAndReturn(run func() interface{}) *MockUserData_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsername provides a mock function with given fields:
func (_m *MockUserData) GetUsername() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsername")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockUserData_GetUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsername'
type MockUserData_GetUsername_Call struct {
	*mock.Call
}

// GetUsername is a helper method to define mock.On call
func (_e *MockUserData_Expecter) GetUsername() *MockUserData_GetUsername_Call {
	return &MockUserData_GetUsername_Call{Call: _e.mock.On("GetUsername")}
}

func (_c *MockUserData_GetUsername_Call) Run(run func()) *MockUserData_GetUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserData_GetUsername_Call) Return(_a0 string) *MockUserData_GetUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserData_GetUsername_Call) RunAndReturn(run func() string) *MockUserData_GetUsername_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserData creates a new instance of MockUserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserData(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserData {
	mock := &MockUserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
