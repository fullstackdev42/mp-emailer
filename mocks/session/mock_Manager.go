// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	sessions "github.com/gorilla/sessions"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// AddFlash provides a mock function with given fields: sess, value
func (_m *MockManager) AddFlash(sess *sessions.Session, value interface{}) {
	_m.Called(sess, value)
}

// MockManager_AddFlash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFlash'
type MockManager_AddFlash_Call struct {
	*mock.Call
}

// AddFlash is a helper method to define mock.On call
//   - sess *sessions.Session
//   - value interface{}
func (_e *MockManager_Expecter) AddFlash(sess interface{}, value interface{}) *MockManager_AddFlash_Call {
	return &MockManager_AddFlash_Call{Call: _e.mock.On("AddFlash", sess, value)}
}

func (_c *MockManager_AddFlash_Call) Run(run func(sess *sessions.Session, value interface{})) *MockManager_AddFlash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sessions.Session), args[1].(interface{}))
	})
	return _c
}

func (_c *MockManager_AddFlash_Call) Return() *MockManager_AddFlash_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_AddFlash_Call) RunAndReturn(run func(*sessions.Session, interface{})) *MockManager_AddFlash_Call {
	_c.Call.Return(run)
	return _c
}

// ClearSession provides a mock function with given fields: c, name
func (_m *MockManager) ClearSession(c echo.Context, name string) error {
	ret := _m.Called(c, name)

	if len(ret) == 0 {
		panic("no return value specified for ClearSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(c, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ClearSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearSession'
type MockManager_ClearSession_Call struct {
	*mock.Call
}

// ClearSession is a helper method to define mock.On call
//   - c echo.Context
//   - name string
func (_e *MockManager_Expecter) ClearSession(c interface{}, name interface{}) *MockManager_ClearSession_Call {
	return &MockManager_ClearSession_Call{Call: _e.mock.On("ClearSession", c, name)}
}

func (_c *MockManager_ClearSession_Call) Run(run func(c echo.Context, name string)) *MockManager_ClearSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManager_ClearSession_Call) Return(_a0 error) *MockManager_ClearSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ClearSession_Call) RunAndReturn(run func(echo.Context, string) error) *MockManager_ClearSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlashes provides a mock function with given fields: sess
func (_m *MockManager) GetFlashes(sess *sessions.Session) []interface{} {
	ret := _m.Called(sess)

	if len(ret) == 0 {
		panic("no return value specified for GetFlashes")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*sessions.Session) []interface{}); ok {
		r0 = rf(sess)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// MockManager_GetFlashes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlashes'
type MockManager_GetFlashes_Call struct {
	*mock.Call
}

// GetFlashes is a helper method to define mock.On call
//   - sess *sessions.Session
func (_e *MockManager_Expecter) GetFlashes(sess interface{}) *MockManager_GetFlashes_Call {
	return &MockManager_GetFlashes_Call{Call: _e.mock.On("GetFlashes", sess)}
}

func (_c *MockManager_GetFlashes_Call) Run(run func(sess *sessions.Session)) *MockManager_GetFlashes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sessions.Session))
	})
	return _c
}

func (_c *MockManager_GetFlashes_Call) Return(_a0 []interface{}) *MockManager_GetFlashes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetFlashes_Call) RunAndReturn(run func(*sessions.Session) []interface{}) *MockManager_GetFlashes_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function with given fields: c, name
func (_m *MockManager) GetSession(c echo.Context, name string) (*sessions.Session, error) {
	ret := _m.Called(c, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *sessions.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*sessions.Session, error)); ok {
		return rf(c, name)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *sessions.Session); ok {
		r0 = rf(c, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(c, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockManager_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - c echo.Context
//   - name string
func (_e *MockManager_Expecter) GetSession(c interface{}, name interface{}) *MockManager_GetSession_Call {
	return &MockManager_GetSession_Call{Call: _e.mock.On("GetSession", c, name)}
}

func (_c *MockManager_GetSession_Call) Run(run func(c echo.Context, name string)) *MockManager_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManager_GetSession_Call) Return(_a0 *sessions.Session, _a1 error) *MockManager_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetSession_Call) RunAndReturn(run func(echo.Context, string) (*sessions.Session, error)) *MockManager_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionValue provides a mock function with given fields: sess, key
func (_m *MockManager) GetSessionValue(sess *sessions.Session, key string) (interface{}, error) {
	ret := _m.Called(sess, key)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionValue")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*sessions.Session, string) (interface{}, error)); ok {
		return rf(sess, key)
	}
	if rf, ok := ret.Get(0).(func(*sessions.Session, string) interface{}); ok {
		r0 = rf(sess, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*sessions.Session, string) error); ok {
		r1 = rf(sess, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetSessionValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionValue'
type MockManager_GetSessionValue_Call struct {
	*mock.Call
}

// GetSessionValue is a helper method to define mock.On call
//   - sess *sessions.Session
//   - key string
func (_e *MockManager_Expecter) GetSessionValue(sess interface{}, key interface{}) *MockManager_GetSessionValue_Call {
	return &MockManager_GetSessionValue_Call{Call: _e.mock.On("GetSessionValue", sess, key)}
}

func (_c *MockManager_GetSessionValue_Call) Run(run func(sess *sessions.Session, key string)) *MockManager_GetSessionValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sessions.Session), args[1].(string))
	})
	return _c
}

func (_c *MockManager_GetSessionValue_Call) Return(_a0 interface{}, _a1 error) *MockManager_GetSessionValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetSessionValue_Call) RunAndReturn(run func(*sessions.Session, string) (interface{}, error)) *MockManager_GetSessionValue_Call {
	_c.Call.Return(run)
	return _c
}

// IsAuthenticated provides a mock function with given fields: c
func (_m *MockManager) IsAuthenticated(c echo.Context) bool {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthenticated")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(echo.Context) bool); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockManager_IsAuthenticated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuthenticated'
type MockManager_IsAuthenticated_Call struct {
	*mock.Call
}

// IsAuthenticated is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockManager_Expecter) IsAuthenticated(c interface{}) *MockManager_IsAuthenticated_Call {
	return &MockManager_IsAuthenticated_Call{Call: _e.mock.On("IsAuthenticated", c)}
}

func (_c *MockManager_IsAuthenticated_Call) Run(run func(c echo.Context)) *MockManager_IsAuthenticated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockManager_IsAuthenticated_Call) Return(_a0 bool) *MockManager_IsAuthenticated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_IsAuthenticated_Call) RunAndReturn(run func(echo.Context) bool) *MockManager_IsAuthenticated_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSession provides a mock function with given fields: c, sess
func (_m *MockManager) SaveSession(c echo.Context, sess *sessions.Session) error {
	ret := _m.Called(c, sess)

	if len(ret) == 0 {
		panic("no return value specified for SaveSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *sessions.Session) error); ok {
		r0 = rf(c, sess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_SaveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSession'
type MockManager_SaveSession_Call struct {
	*mock.Call
}

// SaveSession is a helper method to define mock.On call
//   - c echo.Context
//   - sess *sessions.Session
func (_e *MockManager_Expecter) SaveSession(c interface{}, sess interface{}) *MockManager_SaveSession_Call {
	return &MockManager_SaveSession_Call{Call: _e.mock.On("SaveSession", c, sess)}
}

func (_c *MockManager_SaveSession_Call) Run(run func(c echo.Context, sess *sessions.Session)) *MockManager_SaveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(*sessions.Session))
	})
	return _c
}

func (_c *MockManager_SaveSession_Call) Return(_a0 error) *MockManager_SaveSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_SaveSession_Call) RunAndReturn(run func(echo.Context, *sessions.Session) error) *MockManager_SaveSession_Call {
	_c.Call.Return(run)
	return _c
}

// SetSessionValues provides a mock function with given fields: sess, user
func (_m *MockManager) SetSessionValues(sess *sessions.Session, user interface{}) {
	_m.Called(sess, user)
}

// MockManager_SetSessionValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionValues'
type MockManager_SetSessionValues_Call struct {
	*mock.Call
}

// SetSessionValues is a helper method to define mock.On call
//   - sess *sessions.Session
//   - user interface{}
func (_e *MockManager_Expecter) SetSessionValues(sess interface{}, user interface{}) *MockManager_SetSessionValues_Call {
	return &MockManager_SetSessionValues_Call{Call: _e.mock.On("SetSessionValues", sess, user)}
}

func (_c *MockManager_SetSessionValues_Call) Run(run func(sess *sessions.Session, user interface{})) *MockManager_SetSessionValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sessions.Session), args[1].(interface{}))
	})
	return _c
}

func (_c *MockManager_SetSessionValues_Call) Return() *MockManager_SetSessionValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetSessionValues_Call) RunAndReturn(run func(*sessions.Session, interface{})) *MockManager_SetSessionValues_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSession provides a mock function with given fields: c
func (_m *MockManager) ValidateSession(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ValidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSession'
type MockManager_ValidateSession_Call struct {
	*mock.Call
}

// ValidateSession is a helper method to define mock.On call
//   - c echo.Context
func (_e *MockManager_Expecter) ValidateSession(c interface{}) *MockManager_ValidateSession_Call {
	return &MockManager_ValidateSession_Call{Call: _e.mock.On("ValidateSession", c)}
}

func (_c *MockManager_ValidateSession_Call) Run(run func(c echo.Context)) *MockManager_ValidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockManager_ValidateSession_Call) Return(_a0 error) *MockManager_ValidateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ValidateSession_Call) RunAndReturn(run func(echo.Context) error) *MockManager_ValidateSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
