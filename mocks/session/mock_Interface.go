// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	sessions "github.com/gorilla/sessions"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// AddFlash provides a mock function with given fields: value, vars
func (_m *MockInterface) AddFlash(value interface{}, vars ...string) {
	_va := make([]interface{}, len(vars))
	for _i := range vars {
		_va[_i] = vars[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockInterface_AddFlash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFlash'
type MockInterface_AddFlash_Call struct {
	*mock.Call
}

// AddFlash is a helper method to define mock.On call
//   - value interface{}
//   - vars ...string
func (_e *MockInterface_Expecter) AddFlash(value interface{}, vars ...interface{}) *MockInterface_AddFlash_Call {
	return &MockInterface_AddFlash_Call{Call: _e.mock.On("AddFlash",
		append([]interface{}{value}, vars...)...)}
}

func (_c *MockInterface_AddFlash_Call) Run(run func(value interface{}, vars ...string)) *MockInterface_AddFlash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_AddFlash_Call) Return() *MockInterface_AddFlash_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_AddFlash_Call) RunAndReturn(run func(interface{}, ...string)) *MockInterface_AddFlash_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *MockInterface) Delete(key interface{}) {
	_m.Called(key)
}

// MockInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key interface{}
func (_e *MockInterface_Expecter) Delete(key interface{}) *MockInterface_Delete_Call {
	return &MockInterface_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockInterface_Delete_Call) Run(run func(key interface{})) *MockInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockInterface_Delete_Call) Return() *MockInterface_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_Delete_Call) RunAndReturn(run func(interface{})) *MockInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Flashes provides a mock function with given fields: vars
func (_m *MockInterface) Flashes(vars ...string) []interface{} {
	_va := make([]interface{}, len(vars))
	for _i := range vars {
		_va[_i] = vars[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Flashes")
	}

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(...string) []interface{}); ok {
		r0 = rf(vars...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// MockInterface_Flashes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flashes'
type MockInterface_Flashes_Call struct {
	*mock.Call
}

// Flashes is a helper method to define mock.On call
//   - vars ...string
func (_e *MockInterface_Expecter) Flashes(vars ...interface{}) *MockInterface_Flashes_Call {
	return &MockInterface_Flashes_Call{Call: _e.mock.On("Flashes",
		append([]interface{}{}, vars...)...)}
}

func (_c *MockInterface_Flashes_Call) Run(run func(vars ...string)) *MockInterface_Flashes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_Flashes_Call) Return(_a0 []interface{}) *MockInterface_Flashes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Flashes_Call) RunAndReturn(run func(...string) []interface{}) *MockInterface_Flashes_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockInterface) Get(key interface{}) interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key interface{}
func (_e *MockInterface_Expecter) Get(key interface{}) *MockInterface_Get_Call {
	return &MockInterface_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockInterface_Get_Call) Run(run func(key interface{})) *MockInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockInterface_Get_Call) Return(_a0 interface{}) *MockInterface_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Get_Call) RunAndReturn(run func(interface{}) interface{}) *MockInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *MockInterface) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockInterface_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockInterface_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockInterface_Expecter) GetID() *MockInterface_GetID_Call {
	return &MockInterface_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockInterface_GetID_Call) Run(run func()) *MockInterface_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_GetID_Call) Return(_a0 string) *MockInterface_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_GetID_Call) RunAndReturn(run func() string) *MockInterface_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetValues provides a mock function with given fields:
func (_m *MockInterface) GetValues() map[interface{}]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValues")
	}

	var r0 map[interface{}]interface{}
	if rf, ok := ret.Get(0).(func() map[interface{}]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[interface{}]interface{})
		}
	}

	return r0
}

// MockInterface_GetValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValues'
type MockInterface_GetValues_Call struct {
	*mock.Call
}

// GetValues is a helper method to define mock.On call
func (_e *MockInterface_Expecter) GetValues() *MockInterface_GetValues_Call {
	return &MockInterface_GetValues_Call{Call: _e.mock.On("GetValues")}
}

func (_c *MockInterface_GetValues_Call) Run(run func()) *MockInterface_GetValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_GetValues_Call) Return(_a0 map[interface{}]interface{}) *MockInterface_GetValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_GetValues_Call) RunAndReturn(run func() map[interface{}]interface{}) *MockInterface_GetValues_Call {
	_c.Call.Return(run)
	return _c
}

// IsNew provides a mock function with given fields:
func (_m *MockInterface) IsNew() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsNew")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockInterface_IsNew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNew'
type MockInterface_IsNew_Call struct {
	*mock.Call
}

// IsNew is a helper method to define mock.On call
func (_e *MockInterface_Expecter) IsNew() *MockInterface_IsNew_Call {
	return &MockInterface_IsNew_Call{Call: _e.mock.On("IsNew")}
}

func (_c *MockInterface_IsNew_Call) Run(run func()) *MockInterface_IsNew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_IsNew_Call) Return(_a0 bool) *MockInterface_IsNew_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_IsNew_Call) RunAndReturn(run func() bool) *MockInterface_IsNew_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function with given fields:
func (_m *MockInterface) Options() *sessions.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 *sessions.Options
	if rf, ok := ret.Get(0).(func() *sessions.Options); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Options)
		}
	}

	return r0
}

// MockInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Options() *MockInterface_Options_Call {
	return &MockInterface_Options_Call{Call: _e.mock.On("Options")}
}

func (_c *MockInterface_Options_Call) Run(run func()) *MockInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Options_Call) Return(_a0 *sessions.Options) *MockInterface_Options_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Options_Call) RunAndReturn(run func() *sessions.Options) *MockInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: r, w
func (_m *MockInterface) Save(r *http.Request, w http.ResponseWriter) error {
	ret := _m.Called(r, w)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, http.ResponseWriter) error); ok {
		r0 = rf(r, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockInterface_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - r *http.Request
//   - w http.ResponseWriter
func (_e *MockInterface_Expecter) Save(r interface{}, w interface{}) *MockInterface_Save_Call {
	return &MockInterface_Save_Call{Call: _e.mock.On("Save", r, w)}
}

func (_c *MockInterface_Save_Call) Run(run func(r *http.Request, w http.ResponseWriter)) *MockInterface_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockInterface_Save_Call) Return(_a0 error) *MockInterface_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Save_Call) RunAndReturn(run func(*http.Request, http.ResponseWriter) error) *MockInterface_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, val
func (_m *MockInterface) Set(key interface{}, val interface{}) {
	_m.Called(key, val)
}

// MockInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key interface{}
//   - val interface{}
func (_e *MockInterface_Expecter) Set(key interface{}, val interface{}) *MockInterface_Set_Call {
	return &MockInterface_Set_Call{Call: _e.mock.On("Set", key, val)}
}

func (_c *MockInterface_Set_Call) Run(run func(key interface{}, val interface{})) *MockInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(interface{}))
	})
	return _c
}

func (_c *MockInterface_Set_Call) Return() *MockInterface_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_Set_Call) RunAndReturn(run func(interface{}, interface{})) *MockInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Values provides a mock function with given fields:
func (_m *MockInterface) Values() map[interface{}]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Values")
	}

	var r0 map[interface{}]interface{}
	if rf, ok := ret.Get(0).(func() map[interface{}]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[interface{}]interface{})
		}
	}

	return r0
}

// MockInterface_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type MockInterface_Values_Call struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Values() *MockInterface_Values_Call {
	return &MockInterface_Values_Call{Call: _e.mock.On("Values")}
}

func (_c *MockInterface_Values_Call) Run(run func()) *MockInterface_Values_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Values_Call) Return(_a0 map[interface{}]interface{}) *MockInterface_Values_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Values_Call) RunAndReturn(run func() map[interface{}]interface{}) *MockInterface_Values_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
