// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function with given fields: to, subject, body, isHTML
func (_m *MockService) SendEmail(to string, subject string, body string, isHTML bool) error {
	ret := _m.Called(to, subject, body, isHTML)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool) error); ok {
		r0 = rf(to, subject, body, isHTML)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MockService_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - to string
//   - subject string
//   - body string
//   - isHTML bool
func (_e *MockService_Expecter) SendEmail(to interface{}, subject interface{}, body interface{}, isHTML interface{}) *MockService_SendEmail_Call {
	return &MockService_SendEmail_Call{Call: _e.mock.On("SendEmail", to, subject, body, isHTML)}
}

func (_c *MockService_SendEmail_Call) Run(run func(to string, subject string, body string, isHTML bool)) *MockService_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockService_SendEmail_Call) Return(_a0 error) *MockService_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SendEmail_Call) RunAndReturn(run func(string, string, string, bool) error) *MockService_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendPasswordReset provides a mock function with given fields: to, resetToken
func (_m *MockService) SendPasswordReset(to string, resetToken string) error {
	ret := _m.Called(to, resetToken)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(to, resetToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_SendPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPasswordReset'
type MockService_SendPasswordReset_Call struct {
	*mock.Call
}

// SendPasswordReset is a helper method to define mock.On call
//   - to string
//   - resetToken string
func (_e *MockService_Expecter) SendPasswordReset(to interface{}, resetToken interface{}) *MockService_SendPasswordReset_Call {
	return &MockService_SendPasswordReset_Call{Call: _e.mock.On("SendPasswordReset", to, resetToken)}
}

func (_c *MockService_SendPasswordReset_Call) Run(run func(to string, resetToken string)) *MockService_SendPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockService_SendPasswordReset_Call) Return(_a0 error) *MockService_SendPasswordReset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_SendPasswordReset_Call) RunAndReturn(run func(string, string) error) *MockService_SendPasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
