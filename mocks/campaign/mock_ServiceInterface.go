// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	campaign "github.com/fullstackdev42/mp-emailer/campaign"
	mock "github.com/stretchr/testify/mock"
)

// MockServiceInterface is an autogenerated mock type for the ServiceInterface type
type MockServiceInterface struct {
	mock.Mock
}

type MockServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceInterface) EXPECT() *MockServiceInterface_Expecter {
	return &MockServiceInterface_Expecter{mock: &_m.Mock}
}

// ComposeEmail provides a mock function with given fields: params
func (_m *MockServiceInterface) ComposeEmail(params campaign.ComposeEmailParams) (string, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for ComposeEmail")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.ComposeEmailParams) (string, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(campaign.ComposeEmailParams) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(campaign.ComposeEmailParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceInterface_ComposeEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComposeEmail'
type MockServiceInterface_ComposeEmail_Call struct {
	*mock.Call
}

// ComposeEmail is a helper method to define mock.On call
//   - params campaign.ComposeEmailParams
func (_e *MockServiceInterface_Expecter) ComposeEmail(params interface{}) *MockServiceInterface_ComposeEmail_Call {
	return &MockServiceInterface_ComposeEmail_Call{Call: _e.mock.On("ComposeEmail", params)}
}

func (_c *MockServiceInterface_ComposeEmail_Call) Run(run func(params campaign.ComposeEmailParams)) *MockServiceInterface_ComposeEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(campaign.ComposeEmailParams))
	})
	return _c
}

func (_c *MockServiceInterface_ComposeEmail_Call) Return(_a0 string, _a1 error) *MockServiceInterface_ComposeEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceInterface_ComposeEmail_Call) RunAndReturn(run func(campaign.ComposeEmailParams) (string, error)) *MockServiceInterface_ComposeEmail_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCampaign provides a mock function with given fields: dto
func (_m *MockServiceInterface) CreateCampaign(dto *campaign.CreateCampaignDTO) (*campaign.Campaign, error) {
	ret := _m.Called(dto)

	if len(ret) == 0 {
		panic("no return value specified for CreateCampaign")
	}

	var r0 *campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(*campaign.CreateCampaignDTO) (*campaign.Campaign, error)); ok {
		return rf(dto)
	}
	if rf, ok := ret.Get(0).(func(*campaign.CreateCampaignDTO) *campaign.Campaign); ok {
		r0 = rf(dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(*campaign.CreateCampaignDTO) error); ok {
		r1 = rf(dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceInterface_CreateCampaign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCampaign'
type MockServiceInterface_CreateCampaign_Call struct {
	*mock.Call
}

// CreateCampaign is a helper method to define mock.On call
//   - dto *campaign.CreateCampaignDTO
func (_e *MockServiceInterface_Expecter) CreateCampaign(dto interface{}) *MockServiceInterface_CreateCampaign_Call {
	return &MockServiceInterface_CreateCampaign_Call{Call: _e.mock.On("CreateCampaign", dto)}
}

func (_c *MockServiceInterface_CreateCampaign_Call) Run(run func(dto *campaign.CreateCampaignDTO)) *MockServiceInterface_CreateCampaign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*campaign.CreateCampaignDTO))
	})
	return _c
}

func (_c *MockServiceInterface_CreateCampaign_Call) Return(_a0 *campaign.Campaign, _a1 error) *MockServiceInterface_CreateCampaign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceInterface_CreateCampaign_Call) RunAndReturn(run func(*campaign.CreateCampaignDTO) (*campaign.Campaign, error)) *MockServiceInterface_CreateCampaign_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCampaign provides a mock function with given fields: params
func (_m *MockServiceInterface) DeleteCampaign(params campaign.DeleteCampaignDTO) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCampaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(campaign.DeleteCampaignDTO) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceInterface_DeleteCampaign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCampaign'
type MockServiceInterface_DeleteCampaign_Call struct {
	*mock.Call
}

// DeleteCampaign is a helper method to define mock.On call
//   - params campaign.DeleteCampaignDTO
func (_e *MockServiceInterface_Expecter) DeleteCampaign(params interface{}) *MockServiceInterface_DeleteCampaign_Call {
	return &MockServiceInterface_DeleteCampaign_Call{Call: _e.mock.On("DeleteCampaign", params)}
}

func (_c *MockServiceInterface_DeleteCampaign_Call) Run(run func(params campaign.DeleteCampaignDTO)) *MockServiceInterface_DeleteCampaign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(campaign.DeleteCampaignDTO))
	})
	return _c
}

func (_c *MockServiceInterface_DeleteCampaign_Call) Return(_a0 error) *MockServiceInterface_DeleteCampaign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceInterface_DeleteCampaign_Call) RunAndReturn(run func(campaign.DeleteCampaignDTO) error) *MockServiceInterface_DeleteCampaign_Call {
	_c.Call.Return(run)
	return _c
}

// FetchCampaign provides a mock function with given fields: params
func (_m *MockServiceInterface) FetchCampaign(params campaign.GetCampaignParams) (*campaign.Campaign, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for FetchCampaign")
	}

	var r0 *campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.GetCampaignParams) (*campaign.Campaign, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(campaign.GetCampaignParams) *campaign.Campaign); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(campaign.GetCampaignParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceInterface_FetchCampaign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchCampaign'
type MockServiceInterface_FetchCampaign_Call struct {
	*mock.Call
}

// FetchCampaign is a helper method to define mock.On call
//   - params campaign.GetCampaignParams
func (_e *MockServiceInterface_Expecter) FetchCampaign(params interface{}) *MockServiceInterface_FetchCampaign_Call {
	return &MockServiceInterface_FetchCampaign_Call{Call: _e.mock.On("FetchCampaign", params)}
}

func (_c *MockServiceInterface_FetchCampaign_Call) Run(run func(params campaign.GetCampaignParams)) *MockServiceInterface_FetchCampaign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(campaign.GetCampaignParams))
	})
	return _c
}

func (_c *MockServiceInterface_FetchCampaign_Call) Return(_a0 *campaign.Campaign, _a1 error) *MockServiceInterface_FetchCampaign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceInterface_FetchCampaign_Call) RunAndReturn(run func(campaign.GetCampaignParams) (*campaign.Campaign, error)) *MockServiceInterface_FetchCampaign_Call {
	_c.Call.Return(run)
	return _c
}

// GetCampaignByID provides a mock function with given fields: params
func (_m *MockServiceInterface) GetCampaignByID(params campaign.GetCampaignParams) (*campaign.Campaign, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaignByID")
	}

	var r0 *campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(campaign.GetCampaignParams) (*campaign.Campaign, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(campaign.GetCampaignParams) *campaign.Campaign); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(campaign.GetCampaignParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceInterface_GetCampaignByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCampaignByID'
type MockServiceInterface_GetCampaignByID_Call struct {
	*mock.Call
}

// GetCampaignByID is a helper method to define mock.On call
//   - params campaign.GetCampaignParams
func (_e *MockServiceInterface_Expecter) GetCampaignByID(params interface{}) *MockServiceInterface_GetCampaignByID_Call {
	return &MockServiceInterface_GetCampaignByID_Call{Call: _e.mock.On("GetCampaignByID", params)}
}

func (_c *MockServiceInterface_GetCampaignByID_Call) Run(run func(params campaign.GetCampaignParams)) *MockServiceInterface_GetCampaignByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(campaign.GetCampaignParams))
	})
	return _c
}

func (_c *MockServiceInterface_GetCampaignByID_Call) Return(_a0 *campaign.Campaign, _a1 error) *MockServiceInterface_GetCampaignByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceInterface_GetCampaignByID_Call) RunAndReturn(run func(campaign.GetCampaignParams) (*campaign.Campaign, error)) *MockServiceInterface_GetCampaignByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCampaigns provides a mock function with given fields:
func (_m *MockServiceInterface) GetCampaigns() ([]campaign.Campaign, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCampaigns")
	}

	var r0 []campaign.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]campaign.Campaign, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []campaign.Campaign); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]campaign.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceInterface_GetCampaigns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCampaigns'
type MockServiceInterface_GetCampaigns_Call struct {
	*mock.Call
}

// GetCampaigns is a helper method to define mock.On call
func (_e *MockServiceInterface_Expecter) GetCampaigns() *MockServiceInterface_GetCampaigns_Call {
	return &MockServiceInterface_GetCampaigns_Call{Call: _e.mock.On("GetCampaigns")}
}

func (_c *MockServiceInterface_GetCampaigns_Call) Run(run func()) *MockServiceInterface_GetCampaigns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServiceInterface_GetCampaigns_Call) Return(_a0 []campaign.Campaign, _a1 error) *MockServiceInterface_GetCampaigns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceInterface_GetCampaigns_Call) RunAndReturn(run func() ([]campaign.Campaign, error)) *MockServiceInterface_GetCampaigns_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCampaign provides a mock function with given fields: dto
func (_m *MockServiceInterface) UpdateCampaign(dto *campaign.UpdateCampaignDTO) error {
	ret := _m.Called(dto)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*campaign.UpdateCampaignDTO) error); ok {
		r0 = rf(dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServiceInterface_UpdateCampaign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCampaign'
type MockServiceInterface_UpdateCampaign_Call struct {
	*mock.Call
}

// UpdateCampaign is a helper method to define mock.On call
//   - dto *campaign.UpdateCampaignDTO
func (_e *MockServiceInterface_Expecter) UpdateCampaign(dto interface{}) *MockServiceInterface_UpdateCampaign_Call {
	return &MockServiceInterface_UpdateCampaign_Call{Call: _e.mock.On("UpdateCampaign", dto)}
}

func (_c *MockServiceInterface_UpdateCampaign_Call) Run(run func(dto *campaign.UpdateCampaignDTO)) *MockServiceInterface_UpdateCampaign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*campaign.UpdateCampaignDTO))
	})
	return _c
}

func (_c *MockServiceInterface_UpdateCampaign_Call) Return(_a0 error) *MockServiceInterface_UpdateCampaign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceInterface_UpdateCampaign_Call) RunAndReturn(run func(*campaign.UpdateCampaignDTO) error) *MockServiceInterface_UpdateCampaign_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServiceInterface creates a new instance of MockServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceInterface {
	mock := &MockServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
