// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	sessions "github.com/gorilla/sessions"
)

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore struct {
	mock.Mock
}

type MockSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStore) EXPECT() *MockSessionStore_Expecter {
	return &MockSessionStore_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with given fields: r
func (_m *MockSessionStore) Clear(r *http.Request) {
	_m.Called(r)
}

// MockSessionStore_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockSessionStore_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - r *http.Request
func (_e *MockSessionStore_Expecter) Clear(r interface{}) *MockSessionStore_Clear_Call {
	return &MockSessionStore_Clear_Call{Call: _e.mock.On("Clear", r)}
}

func (_c *MockSessionStore_Clear_Call) Run(run func(r *http.Request)) *MockSessionStore_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockSessionStore_Clear_Call) Return() *MockSessionStore_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionStore_Clear_Call) RunAndReturn(run func(*http.Request)) *MockSessionStore_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: r, w
func (_m *MockSessionStore) Delete(r *http.Request, w http.ResponseWriter) error {
	ret := _m.Called(r, w)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, http.ResponseWriter) error); ok {
		r0 = rf(r, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSessionStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - r *http.Request
//   - w http.ResponseWriter
func (_e *MockSessionStore_Expecter) Delete(r interface{}, w interface{}) *MockSessionStore_Delete_Call {
	return &MockSessionStore_Delete_Call{Call: _e.mock.On("Delete", r, w)}
}

func (_c *MockSessionStore_Delete_Call) Run(run func(r *http.Request, w http.ResponseWriter)) *MockSessionStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockSessionStore_Delete_Call) Return(_a0 error) *MockSessionStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStore_Delete_Call) RunAndReturn(run func(*http.Request, http.ResponseWriter) error) *MockSessionStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: r, name
func (_m *MockSessionStore) Get(r *http.Request, name string) (*sessions.Session, error) {
	ret := _m.Called(r, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sessions.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, string) (*sessions.Session, error)); ok {
		return rf(r, name)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, string) *sessions.Session); ok {
		r0 = rf(r, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - r *http.Request
//   - name string
func (_e *MockSessionStore_Expecter) Get(r interface{}, name interface{}) *MockSessionStore_Get_Call {
	return &MockSessionStore_Get_Call{Call: _e.mock.On("Get", r, name)}
}

func (_c *MockSessionStore_Get_Call) Run(run func(r *http.Request, name string)) *MockSessionStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(string))
	})
	return _c
}

func (_c *MockSessionStore_Get_Call) Return(_a0 *sessions.Session, _a1 error) *MockSessionStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionStore_Get_Call) RunAndReturn(run func(*http.Request, string) (*sessions.Session, error)) *MockSessionStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// MaxAge provides a mock function with given fields: age
func (_m *MockSessionStore) MaxAge(age int) {
	_m.Called(age)
}

// MockSessionStore_MaxAge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxAge'
type MockSessionStore_MaxAge_Call struct {
	*mock.Call
}

// MaxAge is a helper method to define mock.On call
//   - age int
func (_e *MockSessionStore_Expecter) MaxAge(age interface{}) *MockSessionStore_MaxAge_Call {
	return &MockSessionStore_MaxAge_Call{Call: _e.mock.On("MaxAge", age)}
}

func (_c *MockSessionStore_MaxAge_Call) Run(run func(age int)) *MockSessionStore_MaxAge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockSessionStore_MaxAge_Call) Return() *MockSessionStore_MaxAge_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionStore_MaxAge_Call) RunAndReturn(run func(int)) *MockSessionStore_MaxAge_Call {
	_c.Call.Return(run)
	return _c
}

// MaxLength provides a mock function with given fields: length
func (_m *MockSessionStore) MaxLength(length int) {
	_m.Called(length)
}

// MockSessionStore_MaxLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxLength'
type MockSessionStore_MaxLength_Call struct {
	*mock.Call
}

// MaxLength is a helper method to define mock.On call
//   - length int
func (_e *MockSessionStore_Expecter) MaxLength(length interface{}) *MockSessionStore_MaxLength_Call {
	return &MockSessionStore_MaxLength_Call{Call: _e.mock.On("MaxLength", length)}
}

func (_c *MockSessionStore_MaxLength_Call) Run(run func(length int)) *MockSessionStore_MaxLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockSessionStore_MaxLength_Call) Return() *MockSessionStore_MaxLength_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionStore_MaxLength_Call) RunAndReturn(run func(int)) *MockSessionStore_MaxLength_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: r, name
func (_m *MockSessionStore) New(r *http.Request, name string) (*sessions.Session, error) {
	ret := _m.Called(r, name)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 *sessions.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, string) (*sessions.Session, error)); ok {
		return rf(r, name)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, string) *sessions.Session); ok {
		r0 = rf(r, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionStore_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockSessionStore_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - r *http.Request
//   - name string
func (_e *MockSessionStore_Expecter) New(r interface{}, name interface{}) *MockSessionStore_New_Call {
	return &MockSessionStore_New_Call{Call: _e.mock.On("New", r, name)}
}

func (_c *MockSessionStore_New_Call) Run(run func(r *http.Request, name string)) *MockSessionStore_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(string))
	})
	return _c
}

func (_c *MockSessionStore_New_Call) Return(_a0 *sessions.Session, _a1 error) *MockSessionStore_New_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionStore_New_Call) RunAndReturn(run func(*http.Request, string) (*sessions.Session, error)) *MockSessionStore_New_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function with given fields: options
func (_m *MockSessionStore) Options(options *sessions.Options) {
	_m.Called(options)
}

// MockSessionStore_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSessionStore_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options *sessions.Options
func (_e *MockSessionStore_Expecter) Options(options interface{}) *MockSessionStore_Options_Call {
	return &MockSessionStore_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSessionStore_Options_Call) Run(run func(options *sessions.Options)) *MockSessionStore_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sessions.Options))
	})
	return _c
}

func (_c *MockSessionStore_Options_Call) Return() *MockSessionStore_Options_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionStore_Options_Call) RunAndReturn(run func(*sessions.Options)) *MockSessionStore_Options_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: r, w, s
func (_m *MockSessionStore) Save(r *http.Request, w http.ResponseWriter, s *sessions.Session) error {
	ret := _m.Called(r, w, s)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, http.ResponseWriter, *sessions.Session) error); ok {
		r0 = rf(r, w, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionStore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockSessionStore_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - r *http.Request
//   - w http.ResponseWriter
//   - s *sessions.Session
func (_e *MockSessionStore_Expecter) Save(r interface{}, w interface{}, s interface{}) *MockSessionStore_Save_Call {
	return &MockSessionStore_Save_Call{Call: _e.mock.On("Save", r, w, s)}
}

func (_c *MockSessionStore_Save_Call) Run(run func(r *http.Request, w http.ResponseWriter, s *sessions.Session)) *MockSessionStore_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(http.ResponseWriter), args[2].(*sessions.Session))
	})
	return _c
}

func (_c *MockSessionStore_Save_Call) Return(_a0 error) *MockSessionStore_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStore_Save_Call) RunAndReturn(run func(*http.Request, http.ResponseWriter, *sessions.Session) error) *MockSessionStore_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SessionID provides a mock function with given fields: r
func (_m *MockSessionStore) SessionID(r *http.Request) string {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SessionID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*http.Request) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSessionStore_SessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionID'
type MockSessionStore_SessionID_Call struct {
	*mock.Call
}

// SessionID is a helper method to define mock.On call
//   - r *http.Request
func (_e *MockSessionStore_Expecter) SessionID(r interface{}) *MockSessionStore_SessionID_Call {
	return &MockSessionStore_SessionID_Call{Call: _e.mock.On("SessionID", r)}
}

func (_c *MockSessionStore_SessionID_Call) Run(run func(r *http.Request)) *MockSessionStore_SessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockSessionStore_SessionID_Call) Return(_a0 string) *MockSessionStore_SessionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStore_SessionID_Call) RunAndReturn(run func(*http.Request) string) *MockSessionStore_SessionID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields:
func (_m *MockSessionStore) Store() sessions.Store {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 sessions.Store
	if rf, ok := ret.Get(0).(func() sessions.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sessions.Store)
		}
	}

	return r0
}

// MockSessionStore_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockSessionStore_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
func (_e *MockSessionStore_Expecter) Store() *MockSessionStore_Store_Call {
	return &MockSessionStore_Store_Call{Call: _e.mock.On("Store")}
}

func (_c *MockSessionStore_Store_Call) Run(run func()) *MockSessionStore_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionStore_Store_Call) Return(_a0 sessions.Store) *MockSessionStore_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStore_Store_Call) RunAndReturn(run func() sessions.Store) *MockSessionStore_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStore {
	mock := &MockSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
