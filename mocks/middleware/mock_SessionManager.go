// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	sessions "github.com/gorilla/sessions"
)

// MockSessionManager is an autogenerated mock type for the SessionManager type
type MockSessionManager struct {
	mock.Mock
}

type MockSessionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionManager) EXPECT() *MockSessionManager_Expecter {
	return &MockSessionManager_Expecter{mock: &_m.Mock}
}

// ClearSession provides a mock function with given fields: c, name
func (_m *MockSessionManager) ClearSession(c echo.Context, name string) error {
	ret := _m.Called(c, name)

	if len(ret) == 0 {
		panic("no return value specified for ClearSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(c, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionManager_ClearSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearSession'
type MockSessionManager_ClearSession_Call struct {
	*mock.Call
}

// ClearSession is a helper method to define mock.On call
//   - c echo.Context
//   - name string
func (_e *MockSessionManager_Expecter) ClearSession(c interface{}, name interface{}) *MockSessionManager_ClearSession_Call {
	return &MockSessionManager_ClearSession_Call{Call: _e.mock.On("ClearSession", c, name)}
}

func (_c *MockSessionManager_ClearSession_Call) Run(run func(c echo.Context, name string)) *MockSessionManager_ClearSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionManager_ClearSession_Call) Return(_a0 error) *MockSessionManager_ClearSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionManager_ClearSession_Call) RunAndReturn(run func(echo.Context, string) error) *MockSessionManager_ClearSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function with given fields: c, name
func (_m *MockSessionManager) GetSession(c echo.Context, name string) (*sessions.Session, error) {
	ret := _m.Called(c, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *sessions.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*sessions.Session, error)); ok {
		return rf(c, name)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *sessions.Session); ok {
		r0 = rf(c, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(c, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionManager_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockSessionManager_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - c echo.Context
//   - name string
func (_e *MockSessionManager_Expecter) GetSession(c interface{}, name interface{}) *MockSessionManager_GetSession_Call {
	return &MockSessionManager_GetSession_Call{Call: _e.mock.On("GetSession", c, name)}
}

func (_c *MockSessionManager_GetSession_Call) Run(run func(c echo.Context, name string)) *MockSessionManager_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionManager_GetSession_Call) Return(_a0 *sessions.Session, _a1 error) *MockSessionManager_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionManager_GetSession_Call) RunAndReturn(run func(echo.Context, string) (*sessions.Session, error)) *MockSessionManager_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSession provides a mock function with given fields: c, session
func (_m *MockSessionManager) SaveSession(c echo.Context, session *sessions.Session) error {
	ret := _m.Called(c, session)

	if len(ret) == 0 {
		panic("no return value specified for SaveSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, *sessions.Session) error); ok {
		r0 = rf(c, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionManager_SaveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSession'
type MockSessionManager_SaveSession_Call struct {
	*mock.Call
}

// SaveSession is a helper method to define mock.On call
//   - c echo.Context
//   - session *sessions.Session
func (_e *MockSessionManager_Expecter) SaveSession(c interface{}, session interface{}) *MockSessionManager_SaveSession_Call {
	return &MockSessionManager_SaveSession_Call{Call: _e.mock.On("SaveSession", c, session)}
}

func (_c *MockSessionManager_SaveSession_Call) Run(run func(c echo.Context, session *sessions.Session)) *MockSessionManager_SaveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(*sessions.Session))
	})
	return _c
}

func (_c *MockSessionManager_SaveSession_Call) Return(_a0 error) *MockSessionManager_SaveSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionManager_SaveSession_Call) RunAndReturn(run func(echo.Context, *sessions.Session) error) *MockSessionManager_SaveSession_Call {
	_c.Call.Return(run)
	return _c
}

// SetSessionValues provides a mock function with given fields: sess, userData
func (_m *MockSessionManager) SetSessionValues(sess *sessions.Session, userData interface{}) {
	_m.Called(sess, userData)
}

// MockSessionManager_SetSessionValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionValues'
type MockSessionManager_SetSessionValues_Call struct {
	*mock.Call
}

// SetSessionValues is a helper method to define mock.On call
//   - sess *sessions.Session
//   - userData interface{}
func (_e *MockSessionManager_Expecter) SetSessionValues(sess interface{}, userData interface{}) *MockSessionManager_SetSessionValues_Call {
	return &MockSessionManager_SetSessionValues_Call{Call: _e.mock.On("SetSessionValues", sess, userData)}
}

func (_c *MockSessionManager_SetSessionValues_Call) Run(run func(sess *sessions.Session, userData interface{})) *MockSessionManager_SetSessionValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sessions.Session), args[1].(interface{}))
	})
	return _c
}

func (_c *MockSessionManager_SetSessionValues_Call) Return() *MockSessionManager_SetSessionValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionManager_SetSessionValues_Call) RunAndReturn(run func(*sessions.Session, interface{})) *MockSessionManager_SetSessionValues_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSession provides a mock function with given fields: name
func (_m *MockSessionManager) ValidateSession(name string) echo.MiddlewareFunc {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSession")
	}

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func(string) echo.MiddlewareFunc); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// MockSessionManager_ValidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSession'
type MockSessionManager_ValidateSession_Call struct {
	*mock.Call
}

// ValidateSession is a helper method to define mock.On call
//   - name string
func (_e *MockSessionManager_Expecter) ValidateSession(name interface{}) *MockSessionManager_ValidateSession_Call {
	return &MockSessionManager_ValidateSession_Call{Call: _e.mock.On("ValidateSession", name)}
}

func (_c *MockSessionManager_ValidateSession_Call) Run(run func(name string)) *MockSessionManager_ValidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSessionManager_ValidateSession_Call) Return(_a0 echo.MiddlewareFunc) *MockSessionManager_ValidateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionManager_ValidateSession_Call) RunAndReturn(run func(string) echo.MiddlewareFunc) *MockSessionManager_ValidateSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionManager creates a new instance of MockSessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionManager {
	mock := &MockSessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
