// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/jonesrussell/mp-emailer/database"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockDatabase) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDatabase_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Close() *MockDatabase_Close_Call {
	return &MockDatabase_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDatabase_Close_Call) Run(run func()) *MockDatabase_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Close_Call) Return(_a0 error) *MockDatabase_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Close_Call) RunAndReturn(run func() error) *MockDatabase_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, value
func (_m *MockDatabase) Create(ctx context.Context, value interface{}) error {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDatabase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - value interface{}
func (_e *MockDatabase_Expecter) Create(ctx interface{}, value interface{}) *MockDatabase_Create_Call {
	return &MockDatabase_Create_Call{Call: _e.mock.On("Create", ctx, value)}
}

func (_c *MockDatabase_Create_Call) Run(run func(ctx context.Context, value interface{})) *MockDatabase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDatabase_Create_Call) Return(_a0 error) *MockDatabase_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Create_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockDatabase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DB provides a mock function with given fields:
func (_m *MockDatabase) DB() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockDatabase_DB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DB'
type MockDatabase_DB_Call struct {
	*mock.Call
}

// DB is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) DB() *MockDatabase_DB_Call {
	return &MockDatabase_DB_Call{Call: _e.mock.On("DB")}
}

func (_c *MockDatabase_DB_Call) Run(run func()) *MockDatabase_DB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_DB_Call) Return(_a0 *gorm.DB) *MockDatabase_DB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_DB_Call) RunAndReturn(run func() *gorm.DB) *MockDatabase_DB_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, value
func (_m *MockDatabase) Delete(ctx context.Context, value interface{}) error {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDatabase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - value interface{}
func (_e *MockDatabase_Expecter) Delete(ctx interface{}, value interface{}) *MockDatabase_Delete_Call {
	return &MockDatabase_Delete_Call{Call: _e.mock.On("Delete", ctx, value)}
}

func (_c *MockDatabase_Delete_Call) Run(run func(ctx context.Context, value interface{})) *MockDatabase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDatabase_Delete_Call) Return(_a0 error) *MockDatabase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Delete_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockDatabase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, dest, query, args
func (_m *MockDatabase) FindOne(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockDatabase_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *MockDatabase_Expecter) FindOne(ctx interface{}, dest interface{}, query interface{}, args ...interface{}) *MockDatabase_FindOne_Call {
	return &MockDatabase_FindOne_Call{Call: _e.mock.On("FindOne",
		append([]interface{}{ctx, dest, query}, args...)...)}
}

func (_c *MockDatabase_FindOne_Call) Run(run func(ctx context.Context, dest interface{}, query string, args ...interface{})) *MockDatabase_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabase_FindOne_Call) Return(_a0 error) *MockDatabase_FindOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_FindOne_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *MockDatabase_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: ctx, fn
func (_m *MockDatabase) Transaction(ctx context.Context, fn func(database.Database) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(database.Database) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockDatabase_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(database.Database) error
func (_e *MockDatabase_Expecter) Transaction(ctx interface{}, fn interface{}) *MockDatabase_Transaction_Call {
	return &MockDatabase_Transaction_Call{Call: _e.mock.On("Transaction", ctx, fn)}
}

func (_c *MockDatabase_Transaction_Call) Run(run func(ctx context.Context, fn func(database.Database) error)) *MockDatabase_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(database.Database) error))
	})
	return _c
}

func (_c *MockDatabase_Transaction_Call) Return(_a0 error) *MockDatabase_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Transaction_Call) RunAndReturn(run func(context.Context, func(database.Database) error) error) *MockDatabase_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, value
func (_m *MockDatabase) Update(ctx context.Context, value interface{}) error {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatabase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDatabase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - value interface{}
func (_e *MockDatabase_Expecter) Update(ctx interface{}, value interface{}) *MockDatabase_Update_Call {
	return &MockDatabase_Update_Call{Call: _e.mock.On("Update", ctx, value)}
}

func (_c *MockDatabase_Update_Call) Run(run func(ctx context.Context, value interface{})) *MockDatabase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockDatabase_Update_Call) Return(_a0 error) *MockDatabase_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Update_Call) RunAndReturn(run func(context.Context, interface{}) error) *MockDatabase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
