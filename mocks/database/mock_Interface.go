// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: value
func (_m *MockInterface) Create(value interface{}) error {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - value interface{}
func (_e *MockInterface_Expecter) Create(value interface{}) *MockInterface_Create_Call {
	return &MockInterface_Create_Call{Call: _e.mock.On("Create", value)}
}

func (_c *MockInterface_Create_Call) Run(run func(value interface{})) *MockInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockInterface_Create_Call) Return(_a0 error) *MockInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Create_Call) RunAndReturn(run func(interface{}) error) *MockInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: query, args
func (_m *MockInterface) Exec(query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockInterface_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockInterface_Expecter) Exec(query interface{}, args ...interface{}) *MockInterface_Exec_Call {
	return &MockInterface_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockInterface_Exec_Call) Run(run func(query string, args ...interface{})) *MockInterface_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_Exec_Call) Return(_a0 error) *MockInterface_Exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Exec_Call) RunAndReturn(run func(string, ...interface{}) error) *MockInterface_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: model, query, args
func (_m *MockInterface) Exists(model interface{}, query string, args ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, model, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) (bool, error)); ok {
		return rf(model, query, args...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) bool); ok {
		r0 = rf(model, query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...interface{}) error); ok {
		r1 = rf(model, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockInterface_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - model interface{}
//   - query string
//   - args ...interface{}
func (_e *MockInterface_Expecter) Exists(model interface{}, query interface{}, args ...interface{}) *MockInterface_Exists_Call {
	return &MockInterface_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{model, query}, args...)...)}
}

func (_c *MockInterface_Exists_Call) Run(run func(model interface{}, query string, args ...interface{})) *MockInterface_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_Exists_Call) Return(_a0 bool, _a1 error) *MockInterface_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_Exists_Call) RunAndReturn(run func(interface{}, string, ...interface{}) (bool, error)) *MockInterface_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: model, query, args
func (_m *MockInterface) FindOne(model interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, model, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(model, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockInterface_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - model interface{}
//   - query string
//   - args ...interface{}
func (_e *MockInterface_Expecter) FindOne(model interface{}, query interface{}, args ...interface{}) *MockInterface_FindOne_Call {
	return &MockInterface_FindOne_Call{Call: _e.mock.On("FindOne",
		append([]interface{}{model, query}, args...)...)}
}

func (_c *MockInterface_FindOne_Call) Run(run func(model interface{}, query string, args ...interface{})) *MockInterface_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(interface{}), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_FindOne_Call) Return(_a0 error) *MockInterface_FindOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_FindOne_Call) RunAndReturn(run func(interface{}, string, ...interface{}) error) *MockInterface_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: query, args
func (_m *MockInterface) Query(query string, args ...interface{}) *gorm.DB {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *gorm.DB); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// MockInterface_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockInterface_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockInterface_Expecter) Query(query interface{}, args ...interface{}) *MockInterface_Query_Call {
	return &MockInterface_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockInterface_Query_Call) Run(run func(query string, args ...interface{})) *MockInterface_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_Query_Call) Return(_a0 *gorm.DB) *MockInterface_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Query_Call) RunAndReturn(run func(string, ...interface{}) *gorm.DB) *MockInterface_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
