// Code generated by mockery v2.46.3. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: username, email, passwordHash
func (_m *MockRepository) CreateUser(username string, email string, passwordHash string) error {
	ret := _m.Called(username, email, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(username, email, passwordHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - username string
//   - email string
//   - passwordHash string
func (_e *MockRepository_Expecter) CreateUser(username interface{}, email interface{}, passwordHash interface{}) *MockRepository_CreateUser_Call {
	return &MockRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", username, email, passwordHash)}
}

func (_c *MockRepository_CreateUser_Call) Run(run func(username string, email string, passwordHash string)) *MockRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepository_CreateUser_Call) Return(_a0 error) *MockRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_CreateUser_Call) RunAndReturn(run func(string, string, string) error) *MockRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *MockRepository) GetUserByUsername(username string) (*User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockRepository_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockRepository_Expecter) GetUserByUsername(username interface{}) *MockRepository_GetUserByUsername_Call {
	return &MockRepository_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", username)}
}

func (_c *MockRepository_GetUserByUsername_Call) Run(run func(username string)) *MockRepository_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_GetUserByUsername_Call) Return(_a0 *User, _a1 error) *MockRepository_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetUserByUsername_Call) RunAndReturn(run func(string) (*User, error)) *MockRepository_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UserExists provides a mock function with given fields: username, email
func (_m *MockRepository) UserExists(username string, email string) (bool, error) {
	ret := _m.Called(username, email)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(username, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(username, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_UserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExists'
type MockRepository_UserExists_Call struct {
	*mock.Call
}

// UserExists is a helper method to define mock.On call
//   - username string
//   - email string
func (_e *MockRepository_Expecter) UserExists(username interface{}, email interface{}) *MockRepository_UserExists_Call {
	return &MockRepository_UserExists_Call{Call: _e.mock.On("UserExists", username, email)}
}

func (_c *MockRepository_UserExists_Call) Run(run func(username string, email string)) *MockRepository_UserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_UserExists_Call) Return(_a0 bool, _a1 error) *MockRepository_UserExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_UserExists_Call) RunAndReturn(run func(string, string) (bool, error)) *MockRepository_UserExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
