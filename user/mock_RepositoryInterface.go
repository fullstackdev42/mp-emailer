// Code generated by mockery v2.46.3. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockRepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type MockRepositoryInterface struct {
	mock.Mock
}

type MockRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryInterface) EXPECT() *MockRepositoryInterface_Expecter {
	return &MockRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: params
func (_m *MockRepositoryInterface) CreateUser(params *CreateDTO) (*User, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(*CreateDTO) (*User, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*CreateDTO) *User); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(*CreateDTO) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryInterface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockRepositoryInterface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - params *CreateDTO
func (_e *MockRepositoryInterface_Expecter) CreateUser(params interface{}) *MockRepositoryInterface_CreateUser_Call {
	return &MockRepositoryInterface_CreateUser_Call{Call: _e.mock.On("CreateUser", params)}
}

func (_c *MockRepositoryInterface_CreateUser_Call) Run(run func(params *CreateDTO)) *MockRepositoryInterface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*CreateDTO))
	})
	return _c
}

func (_c *MockRepositoryInterface_CreateUser_Call) Return(_a0 *User, _a1 error) *MockRepositoryInterface_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryInterface_CreateUser_Call) RunAndReturn(run func(*CreateDTO) (*User, error)) *MockRepositoryInterface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *MockRepositoryInterface) GetUserByUsername(username string) (*User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryInterface_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockRepositoryInterface_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockRepositoryInterface_Expecter) GetUserByUsername(username interface{}) *MockRepositoryInterface_GetUserByUsername_Call {
	return &MockRepositoryInterface_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", username)}
}

func (_c *MockRepositoryInterface_GetUserByUsername_Call) Run(run func(username string)) *MockRepositoryInterface_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepositoryInterface_GetUserByUsername_Call) Return(_a0 *User, _a1 error) *MockRepositoryInterface_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryInterface_GetUserByUsername_Call) RunAndReturn(run func(string) (*User, error)) *MockRepositoryInterface_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UserExists provides a mock function with given fields: params
func (_m *MockRepositoryInterface) UserExists(params *CreateDTO) (bool, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*CreateDTO) (bool, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*CreateDTO) bool); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*CreateDTO) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryInterface_UserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExists'
type MockRepositoryInterface_UserExists_Call struct {
	*mock.Call
}

// UserExists is a helper method to define mock.On call
//   - params *CreateDTO
func (_e *MockRepositoryInterface_Expecter) UserExists(params interface{}) *MockRepositoryInterface_UserExists_Call {
	return &MockRepositoryInterface_UserExists_Call{Call: _e.mock.On("UserExists", params)}
}

func (_c *MockRepositoryInterface_UserExists_Call) Run(run func(params *CreateDTO)) *MockRepositoryInterface_UserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*CreateDTO))
	})
	return _c
}

func (_c *MockRepositoryInterface_UserExists_Call) Return(_a0 bool, _a1 error) *MockRepositoryInterface_UserExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryInterface_UserExists_Call) RunAndReturn(run func(*CreateDTO) (bool, error)) *MockRepositoryInterface_UserExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryInterface creates a new instance of MockRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
